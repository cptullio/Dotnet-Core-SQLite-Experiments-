// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sonda.Core.Repository;

namespace Sonda.Core.Migrations
{
    [DbContext(typeof(SondaDbContext))]
    [Migration("20181126163103_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024");

            modelBuilder.Entity("Sonda.Core.Domain.Command", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("CanBeIgnored");

                    b.Property<byte>("CommandType");

                    b.Property<string>("Description");

                    b.Property<bool?>("IsFromDatasource");

                    b.Property<bool?>("IsFromService");

                    b.Property<string>("Name");

                    b.Property<byte>("SearchTargetType");

                    b.Property<string>("Target");

                    b.Property<int?>("TestId");

                    b.Property<string>("UrlService");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.ToTable("Command");
                });

            modelBuilder.Entity("Sonda.Core.Domain.ContentDataSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Alvo");

                    b.Property<string>("Chave");

                    b.Property<int?>("DatasourceId");

                    b.Property<string>("Valor");

                    b.HasKey("Id");

                    b.HasIndex("DatasourceId");

                    b.ToTable("ContentDataSource");
                });

            modelBuilder.Entity("Sonda.Core.Domain.DataSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int?>("TestId");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.ToTable("DataSource");
                });

            modelBuilder.Entity("Sonda.Core.Domain.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ExecutionBegin");

                    b.Property<DateTime?>("ExecutionEnd");

                    b.Property<int>("IntervalDataSourceItem");

                    b.Property<int>("IntervalExecution");

                    b.Property<string>("Name");

                    b.Property<string>("UrlTest");

                    b.HasKey("Id");

                    b.ToTable("Test");
                });

            modelBuilder.Entity("Sonda.Core.Domain.Command", b =>
                {
                    b.HasOne("Sonda.Core.Domain.Test", "Test")
                        .WithMany("CommandList")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sonda.Core.Domain.ContentDataSource", b =>
                {
                    b.HasOne("Sonda.Core.Domain.DataSource", "Datasource")
                        .WithMany("ContentDataSourceList")
                        .HasForeignKey("DatasourceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sonda.Core.Domain.DataSource", b =>
                {
                    b.HasOne("Sonda.Core.Domain.Test", "Test")
                        .WithMany("DataSourceList")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
